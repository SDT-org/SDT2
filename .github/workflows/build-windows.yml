name: Build Windows Installer

on:
  push:
    branches: [main, master]
  pull_request:
    branches: [main, master]
  workflow_dispatch:

jobs:
  build-windows:
    runs-on: windows-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: Install NSIS
        run: |
          choco install nsis -y
          echo "C:\Program Files (x86)\NSIS" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append

      - name: Create virtual environment
        run: |
          python -m venv venv

      - name: Install Python dependencies
        run: |
          .\venv\Scripts\pip install --upgrade pip
          .\venv\Scripts\pip install Cython
          .\venv\Scripts\pip install -r requirements.txt

      - name: Install Node dependencies
        run: |
          bun install

      - name: Verify lz-ani binaries exist
        run: |
          if (!(Test-Path "backend\bin\lz-ani.exe")) {
            Write-Error "lz-ani.exe not found in backend\bin"
            exit 1
          }
          if (!(Test-Path "backend\bin\libwinpthread-1.dll")) {
            Write-Error "libwinpthread-1.dll not found in backend\bin"
            exit 1
          }
          if (!(Test-Path "backend\bin\zlib1.dll")) {
            Write-Error "zlib1.dll not found in backend\bin"
            exit 1
          }
          Write-Host "All lz-ani binaries found"

      - name: Build frontend
        run: |
          bun run frontend:build

      - name: Build application
        run: |
          .\venv\Scripts\activate
          python build.py

      - name: List build output
        run: |
          dir build\app.dist\
          dir build\app.dist\backend\bin\

      - name: Create NSIS installer
        run: |
          makensis installer.nsis

      - name: Upload installer artifact
        uses: actions/upload-artifact@v3
        with:
          name: SDT2-Windows-Installer
          path: SDT2_Installer.exe

      - name: Create Release (on tag push)
        if: startsWith(github.ref, 'refs/tags/')
        uses: softprops/action-gh-release@v1
        with:
          files: SDT2_Installer.exe
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
